#include <LiquidCrystal.h>
#include <LedControl.h>
#include <EEPROM.h>



//define matrix dimentions
#define RESET 1
#define M_HEIGHT 8
#define M_LENGTH 8
#define O_BLINK_RATE 75
#define P_BLINK_RATE 10
#define MIN_TRESH 200
#define MAX_TRESH 600
#define ASC_TIME 800
#define P_JUMP_TIME 150
#define DEBOUNCE_DELAY 25
#define MOVE_TIME 500


//define LCD variables

#define RS 9
#define EN 8
#define D4 7
#define D5 6
#define D6 5
#define D7 4
#define LCD_WIDTH 16

LiquidCrystal lcd(RS, EN, D4, D5, D6, D7);


short M_BRIGHT; //0 ->15
short LCD_BRIGHT;
short highScore = 0;

int playerX, playerY;
int lastValUp, lastValDown;
// Thresholds for joystick movement detection
const int minThreshold = 200;
const int maxThreshold = 600;

// Pin definitions for the LED matrix
const int dinPin = 12;
const int clockPin = 11;
const int loadPin = 10;
// Pin definitions for the joystick
const int xPin = A0;
const int yPin = A1;
const int clickPin = A2;



// Create an LedControl object to interface with the LED matrix
LedControl lc = LedControl(dinPin, clockPin, loadPin, 1); // DIN, CLK, LOAD, number of devices





unsigned int speed = 400;
unsigned long lastTravel;
unsigned long lastObsBlink;

bool matrixChanged = true;

byte matrix[M_HEIGHT][2 * M_LENGTH] = { };
byte matrixPos = 0;

const int obsNumber = 2;
const int obsSize = 3;
byte obstacles[7][obsSize][obsSize] = {
  {
    //no obstacle
    {0,0,0},
    {0,0,0},
    {0,0,0}
  },
  {
    
    {0,0,0},
    {0,0,0},
    {0,1,0}
  },
  {
    
    {0,0,0},
    {0,1,0},
    {0,1,0}
  },
  {
    
    {0,0,0},
    {0,0,0},
    {0,1,1}
  },
  {
    {0,0,0},
    {0,1,1},
    {0,1,1}
  },
  {
    {1,1,1},
    {0,0,0},
    {0,0,0}
  },
  {
    {0,0,0},
    {0,1,1},
    {0,0,0}
  }

};


void generateMatrix(){
  
  //add ground
  for(int i = M_LENGTH; i <M_LENGTH * 2; i++){
    matrix[M_HEIGHT - 1][i] = 1;
  }


  // matrix[4][index + 4] = 1 ;
  // generate random obstacle
  int obs = random(obsNumber);
  int obsPosition = M_LENGTH + random(M_LENGTH - obsSize * 2);

  for(int row = 0; row <  obsSize; row++){
    for(int col = 0; col < obsSize; col++){
      matrix[4 + row][M_LENGTH + col] = obstacles[obs][row][col] * 3;
    }
  }


}

void copyForward(){
  for (int row = 0; row < M_HEIGHT; row++){
    for (int col = 0; col < M_LENGTH; col++){
      matrix[row][col] = matrix[row][col + M_LENGTH];
    }
  }
}

void printMatrix(){
  Serial.print("\n\n\n\n\n\n\n\n\n");

   for (int row = 0; row < M_HEIGHT; row++) {
    for (int col = 0; col < M_LENGTH * 2; col++) {
     Serial.print(matrix[row][col]);
     Serial.print(" "); 
    }
    Serial.print('\n');
   }

}

int playerState = 1;
bool isJumping = 0;
bool isCrouching = 0;
bool isAscending = 0;
unsigned long ascendingTime;
unsigned long lastJumpTime;
unsigned long lastPlayerBlink;


unsigned int state;
//states:
/*
0 = click to enter menu
1 = main menu
2 = start game
3 = settings
4 = about

*/

const int menuOptions = 3;
String mainMenuOptions[menuOptions]{
  "Start Game",
  "Settings",
  "About"
};
const int aboutOptions = 4;
String aboutOptionsArray[aboutOptions]{
  "Endless Runner",
  "A game by:",
  "Radu Nedelcu",
  "https://github.com/Pepi100"
};

//button debounce variables
int buttonReading;
int lastButtonState;
unsigned long lastDebounceTime;
int buttonState;
int buttonPressed; // this will store the result of the debounce process

void buttonDebounce(){
  buttonReading = digitalRead(clickPin);
  if (buttonReading != lastButtonState) {
    // reset the debouncing timer
    lastDebounceTime = millis();
  }
  if ((millis() - lastDebounceTime) > DEBOUNCE_DELAY) {
  // whatever the reading is at, it's been there for longer than the debounce
  // delay, so take it as the actual current state:

  // if the button state has changed:
    if (buttonReading != buttonState) {
      buttonState = buttonReading;
      // only toggle the LED if the new button state is LOW
      if (buttonState == LOW) {
        //set state
        buttonPressed = 1;
        //if it pased debounce, we start verification for HOLD
      }
    }
  }



  // save the reading. Next time through the loop, it'll be the lastButtonState:
  lastButtonState = buttonReading;
}

  int xValue;
  int yValue;
void readJoystick(){
  xValue = analogRead(xPin);
  yValue = analogRead(yPin);

  if(xValue < MIN_TRESH){
    xValue = -1;
  }else{
    if(xValue > MAX_TRESH){
      xValue = 1;
    }else{
      xValue = 0;
    }
  }

  if(yValue < MIN_TRESH){
    yValue = -1;
  }else{
    if(yValue > MAX_TRESH){
      yValue = 1;
    }else{
      yValue = 0;
    }
  }
}

void playerMovement(){
  // Serial.println(yValue)

  if(isJumping){
    if(isAscending){
      if(yValue != 1 || ascendingTime + ASC_TIME <= millis()){
        isAscending = 0;
      }else{
        if(yValue == 1 && lastJumpTime + P_JUMP_TIME <= millis()){
          movePlayer(0,-1);
          lastJumpTime = millis();
        }
      }
      
    }else{
      //is falling
      if(playerY < 5){
        if(lastJumpTime + P_JUMP_TIME <= millis()){
          movePlayer(0,1);
          lastJumpTime = millis();
        }
      }else{
        isJumping = 0;
      }


    }
  }else{
    if(yValue == 1){
      isJumping = 1;
      isAscending = 1;
      ascendingTime = millis();
      lastJumpTime = ascendingTime;
      movePlayer(0,-1);
    }
  }

  if(yValue == -1){
    isCrouching = 1;
  }else{
    isCrouching = 0;
  }



  // Serial.println(buttonPressed);

  // if(xValue != lastValueX && xValue != 0){
  //   joystickMoved = 1;
  // }
  // if(yValue != lastValueY && yValue != 0){
  //   joystickMoved = 1;
  // }


}

void movePlayer(int x, int y){

  //restore current position
  
  // update player coordonates
  playerX += x;
  playerY += y;
  drawPlayer();


}


void drawPlayer(){
  // if(lastPlayerBlink + P_BLINK_RATE <= millis()){
  //   playerState = !playerState;
  //   lastPlayerBlink = millis();
  // }

  //store current values
  if(isCrouching == 0)
    lc.setLed(0, playerX - matrixPos, playerY, playerState);
  lc.setLed(0, playerX - matrixPos, playerY + 1, playerState);
}


void advanceGame(){
  if(millis() >= lastTravel + speed){
    matrixPos ++;
    movePlayer(1,0); //one position to the right
    matrixChanged = true;
    if(matrixPos == M_LENGTH){
      //copy the second part onto the first
      copyForward();
      matrixPos = 0;
      movePlayer(-1* M_LENGTH, 0);
      generateMatrix();
    }
    
    
    lastTravel = millis();
  }
}

void blinkObstacles(){
  if(millis() > lastObsBlink + O_BLINK_RATE){
    //switch 2 to 3 and vice versa
    for (int row = 0; row < M_HEIGHT - 1; row++) {
      for (int col = 0; col < M_LENGTH * 2; col++) {
        if(matrix[row][col] == 2 || matrix[row][col] == 3)
          matrix[row][col] = 2 + (matrix[row][col] + 1) % 2;
      }
    }

    lastObsBlink = millis();
    matrixChanged = true;
  }

}

void gameBegin(){

  randomSeed(analogRead(5)); // generate a seed based on random reading from an unconnected pin => https://www.arduino.cc/reference/en/language/functions/random-numbers/random/

  //initialize ground

  for(int i = 0; i <M_LENGTH ; i++){
    matrix[M_HEIGHT - 1][i] = 1;
  }


  generateMatrix();

  playerX = 1;
  playerY = 5;
  drawPlayer();



  // printMatrix();

  lastTravel = millis();

}


//custom character declarations
const byte previousChar = 0;
const byte previous[8] = {
  B00011,
  B00111,
  B01110,
  B11100,
  B01110,
  B00111,
  B00011,
};
const byte nextChar = 1;
const byte next[8] = {
  B11000,
  B11100,
  B01110,
  B00111,
  B01110,
  B11100,
  B11000,
};
const byte upChar = 2;
const byte down[8] = {
	0b00000,
	0b00100,
	0b00100,
	0b00100,
	0b10101,
	0b01010,
	0b00100,
	0b00000
};
const byte downChar = 3;
const byte up[8] = {
	0b00000,
	0b00100,
	0b01010,
	0b10101,
	0b00100,
	0b00100,
	0b00100,
	0b00000
};
const byte heartChar = 4;
const byte heart[8] = {
	B00000,
	B01010,
	B11111,
	B11111,
	B01110,
	B00100,
	B00000,
	B00000
};
const byte selectedChar = 5;
const byte selected[8] = {
  B11000,
  B11100,
  B10110,
  B10011,
  B10011,
  B10110,
  B11100,
  B11000
};


void initLCD(){
  lcd.begin(16, 2);
  lcd.createChar(0, previous);
  lcd.createChar(1, next);
  lcd.createChar(2, up);
  lcd.createChar(3, down);
  lcd.createChar(4, heart);
  lcd.createChar(selectedChar, selected);
  
  String txt = "Welcome to";
  lcd.setCursor( LCD_WIDTH / 2 - txt.length() / 2, 0);
  lcd.print(txt);

  delay(500);

  txt = "Endless Runner";
  lcd.setCursor(LCD_WIDTH / 2 - txt.length() / 2, 1);
  lcd.print(txt);


  delay(1000);

}

void readEEPROM(){
  EEPROM.get(0, M_BRIGHT); //takes up 2 bytes
  EEPROM.get(2, LCD_BRIGHT); //takes up 2 bytes
  EEPROM.get(4, highScore); //takes up 2 bytes
}


void updateEEPROM(){
  EEPROM.update(0, M_BRIGHT); //takes up 2 bytes
  EEPROM.update(2, LCD_BRIGHT); //takes up 2 bytes
  EEPROM.update(4, highScore); //takes up 2 bytes
}

unsigned long lastNextBlink = 0;
const int nextBlinkTime = 500;
bool nextBlinkOn = 1;
void state0(){
  //blink next
  if(millis() > lastNextBlink + nextBlinkTime){
    nextBlinkOn = !nextBlinkOn;
    lcd.setCursor(LCD_WIDTH - 1, 1);
    if(nextBlinkOn){
    lcd.write(nextChar);
    }else{
      lcd.write(" ");
    }
    lastNextBlink = millis();
  }
}

int menuIndex;
int menuSelected;
unsigned long lastMenuMove;
void displayMenu(){
  lcd.setCursor(1,0);
  lcd.print(mainMenuOptions[menuIndex]);
  lcd.setCursor(1,1);
  lcd.print(mainMenuOptions[menuIndex + 1]);

  //selections

  if(menuIndex == menuSelected){
    lcd.setCursor(0,0);
    lcd.write(selectedChar);
  }else{
    lcd.setCursor(0,1);
    lcd.write(selectedChar);
  }
}

void mainMenuLogic(){
  int indexCopy = menuSelected;
  if(yValue && millis() >= lastMenuMove + MOVE_TIME ){
      if(yValue == 1){
      menuSelected = max(menuSelected - 1, 0);
      menuIndex = min(menuSelected, max(menuIndex - 1, 0));
      
    }else{
      menuSelected = min(menuSelected + 1, menuOptions - 1);
      menuIndex = min(menuIndex + 1, menuOptions - 2);
      // lcd.clear();
    }
    if(indexCopy != menuSelected){
      lcd.clear();
    }
    lastMenuMove = millis();
  }
  
  if(buttonPressed){
    state = menuSelected + 2;
    lcd.clear();
    buttonPressed = 0;
  }
}

bool gameOn = 0;

void gameLogic(){
  playerMovement();

  advanceGame();
  

  blinkObstacles();

  // Update the LED matrix display if there's been a change
  if (matrixChanged) {
    updateMatrix();
    matrixChanged = false;
  }

  drawPlayer();
  printMatrix();

}

bool scrollDirection = true;
short scrollPosition;

int aboutIndex;
unsigned long lastScrollTime = 0;
int scrollTime = 600;
void about(){
  lcd.setCursor(0,0);
  lcd.print(aboutOptionsArray[aboutIndex]);
  

  int indexCopy = aboutIndex;
  if(yValue && millis() >= lastMenuMove + MOVE_TIME ){
      if(yValue == 1){
      aboutIndex = max(aboutIndex - 1, 0);
      
    }else{
      aboutIndex = min(aboutIndex + 1, aboutOptions - 2);
    }
    if(indexCopy != aboutIndex){
      lcd.clear();
    }
    lastMenuMove = millis();
  }


  if(aboutIndex == 2){
    


    if(millis() > lastScrollTime + scrollTime){
      if(scrollDirection){
        scrollPosition++;
      }else{
        scrollPosition--;
      }

      String aux = "https://github.com/";
      if (scrollPosition == aux.length()) {
        scrollDirection = false;
      }
      if (scrollPosition == 0) {
        scrollDirection = true;
      }
      lcd.setCursor(0,1);
      lcd.print(aboutOptionsArray[aboutIndex + 1].substring(scrollPosition));
      lcd.print(" ");

      lastScrollTime = millis();
    }
     Serial.print(scrollPosition);
      
    // delay(100);
  }else{
    scrollDirection = true; // true for left, false for right
    // Define the current scroll position
    scrollPosition = 0;

    lcd.setCursor(0,1);
    lcd.print(aboutOptionsArray[aboutIndex + 1]);
  }


  
  if(buttonPressed){
    state = 1;
    lcd.clear();
    buttonPressed = 0;
  }



}

void setup() {
  Serial.begin(9600); // Start serial communication for debugging
  pinMode(clickPin, INPUT_PULLUP);

  // Initialize the LED matrix
  lc.shutdown(0, false); // Disable power saving, turn on the display
  lc.setIntensity(0, M_BRIGHT); // Set the brightness level
  lc.clearDisplay(0); // Clear the display initially

  initLCD();
  state = 0;

  if( RESET ){
    M_BRIGHT = 15; //0 ->15
    LCD_BRIGHT = 1;
    highScore = 0;
  }else{
    readEEPROM();
  }
  
}

// Main loop, runs continuously
void loop() {
  // Serial.println(buttonPressed);
  buttonDebounce();
  readJoystick();

  switch (state){
    case 0:
      state0();
      if(buttonPressed){
        state = 1;
        menuIndex = 0;
        menuSelected = 0;
        lcd.clear();
        buttonPressed = 0;
      }
      break;
    case 1:
      //main menu
      displayMenu();
      mainMenuLogic();
      break;
    case 2:
      //start game;
      if(gameOn == 0){
        gameOn == 1;
        gameBegin();
      }
      gameLogic();

      //TODO defeat


      break;
    case 3:
      //settings
      break;
    case 4:
      about();
      //about
      break;

  }
  

}

// Function to update the LED matrix display
void updateMatrix() {
  for (int row = 0; row < M_HEIGHT; row++) {
    for (int col = matrixPos; col < M_LENGTH + matrixPos; col++) {
      //only odd values should be diplayed
      lc.setLed(0, col - matrixPos, row, matrix[row][col] % 2); // Update each LED state
    }
  }
}



